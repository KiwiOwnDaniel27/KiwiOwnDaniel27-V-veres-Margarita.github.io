section .data
    prompt db 'Ingrese el primer numero: $'
    prompt2 db 'Ingrese el segundo numero: $'
    prompt3 db 'Ingrese el tercer numero: $'
    result_message db 'Resultado: $'
    newline db 0x0A, 0x0D, '$'  ; Salto de línea

section .bss
    num1 resb 1  ; Espacio para almacenar el primer número
    num2 resb 1  ; Espacio para almacenar el segundo número
    num3 resb 1  ; Espacio para almacenar el tercer número
    suma resb 1  ; Espacio para almacenar el resultado de la suma
    resta resb 1  ; Espacio para almacenar el resultado de la resta
    multiplicacion resb 1  ; Espacio para almacenar el resultado de la multiplicación
    division resb 1  ; Espacio para almacenar el resultado de la división

section .text
global _start

_start:
    ; Imprimir mensaje: "Ingrese el primer numero: "
    mov ah, 09h
    lea dx, prompt
    int 21h

    ; Leer el primer número
    mov ah, 01h
    int 21h
    sub al, 30h      ; Convertir de carácter a valor numérico
    mov [num1], al   ; Guardar el primer número

    ; Imprimir mensaje: "Ingrese el segundo numero: "
    mov ah, 09h
    lea dx, prompt2
    int 21h

    ; Leer el segundo número
    mov ah, 01h
    int 21h
    sub al, 30h      ; Convertir de carácter a valor numérico
    mov [num2], al   ; Guardar el segundo número

    ; Imprimir mensaje: "Ingrese el tercer numero: "
    mov ah, 09h
    lea dx, prompt3
    int 21h

    ; Leer el tercer número
    mov ah, 01h
    int 21h
    sub al, 30h      ; Convertir de carácter a valor numérico
    mov [num3], al   ; Guardar el tercer número

    ; Sumar los números
    mov al, [num1]
    add al, [num2]
    add al, [num3]
    add al, 30h      ; Convertir el resultado a carácter
    mov [suma], al   ; Guardar el resultado de la suma

    ; Restar los números
    mov al, [num1]
    sub al, [num2]
    sub al, [num3]
    add al, 30h      ; Convertir el resultado a carácter
    mov [resta], al  ; Guardar el resultado de la resta

    ; Multiplicar los números
    mov al, [num1]
    imul al, [num2]
    imul al, [num3]
    add al, 30h      ; Convertir el resultado a carácter
    mov [multiplicacion], al  ; Guardar el resultado de la multiplicación

    ; Dividir los números (considerando que la división no tiene resto)
    mov al, [num1]
    mov bl, [num2]
    div bl           ; AX / BL -> AH = cociente, AL = resto
    mov cl, al       ; Guardar el resultado de la división
    mov al, cl
    add al, 30h      ; Convertir el resultado a carácter
    mov [division], al   ; Guardar el resultado de la división

    ; Imprimir el resultado de la suma
    mov ah, 09h
    lea dx, result_message
    int 21h
    mov ah, 02h
    mov dl, [suma]
    int 21h
    mov ah, 09h
    lea dx, newline
    int 21h

    ; Imprimir el resultado de la resta
    mov ah, 09h
    lea dx, result_message
    int 21h
    mov ah, 02h
    mov dl, [resta]
    int 21h
    mov ah, 09h
    lea dx, newline
    int 21h

    ; Imprimir el resultado de la multiplicación
    mov ah, 09h
    lea dx, result_message
    int 21h
    mov ah, 02h
    mov dl, [multiplicacion]
    int 21h
    mov ah, 09h
    lea dx, newline
    int 21h

    ; Imprimir el resultado de la división
    mov ah, 09h
    lea dx, result_message
    int 21h
    mov ah, 02h
    mov dl, [division]
    int 21h
    mov ah, 09h
    lea dx, newline
    int 21h

    ; Finalizar el programa
    mov ah, 4Ch
    int 21h